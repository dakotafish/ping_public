from base64 import b64decode
from django.test import TestCase
from lxml import etree

from .utils.saml_decrypter import SamlDecrypter

class SamlDecrypterTests(TestCase):

    def test_aes128_decryption(self):
        """ Test to ensure we can decrypt a SAML Assertion that was encrypted via AES128 """
        test_private_key = '/Users/dfischer/Documents/bf_certs/private_keys/test_public_private/test.partner.benefitfocus.com.key.pem'
        decryption_keys = [test_private_key]
        aes128_saml = ''
        aes128_saml = etree.fromstring(b64decode(aes128_saml))
        aes128_decrypted_assertion = SamlDecrypter(aes128_saml, decryption_keys).decrypt()
        self.assertIsNotNone(aes128_decrypted_assertion)

    def test_aes256_decryption(self):
        """ Test to ensure we can decrypt a SAML Assertion that was encrypted via AES256 """
        test_private_key = '/Users/dfischer/Documents/bf_certs/private_keys/test_public_private/test.partner.benefitfocus.com.key.pem'
        decryption_keys = [test_private_key]
        aes256_saml = 'PHNhbWxwOlJlc3BvbnNlIFZlcnNpb249IjIuMCIgSUQ9IlpFTkJtb3AtbGJWem4xSjJ0LTRSNlVvLnpobSIgSXNzdWVJbnN0YW50PSIyMDIwLTEwLTA1VDAyOjEzOjI0LjA1M1oiIERlc3RpbmF0aW9uPSJodHRwOi8vMTAuMjAxLjI1MC4xNjQ6ODAwMC9zcC9BQ1Muc2FtbDIiIHhtbG5zOnNhbWxwPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6cHJvdG9jb2wiPjxzYW1sOklzc3VlciB4bWxuczpzYW1sPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXNzZXJ0aW9uIj5iZW5lZml0Zm9jdXMuY29tOmlkcDwvc2FtbDpJc3N1ZXI+PGRzOlNpZ25hdHVyZSB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI+CjxkczpTaWduZWRJbmZvPgo8ZHM6Q2Fub25pY2FsaXphdGlvbk1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPgo8ZHM6U2lnbmF0dXJlTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI3JzYS1zaGExIi8+CjxkczpSZWZlcmVuY2UgVVJJPSIjWkVOQm1vcC1sYlZ6bjFKMnQtNFI2VW8uemhtIj4KPGRzOlRyYW5zZm9ybXM+CjxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjZW52ZWxvcGVkLXNpZ25hdHVyZSIvPgo8ZHM6VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIi8+CjwvZHM6VHJhbnNmb3Jtcz4KPGRzOkRpZ2VzdE1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNzaGExIi8+CjxkczpEaWdlc3RWYWx1ZT5PYXB2b21nUHNyVlJkNE1ldnBiRlpTcjRxMzg9PC9kczpEaWdlc3RWYWx1ZT4KPC9kczpSZWZlcmVuY2U+CjwvZHM6U2lnbmVkSW5mbz4KPGRzOlNpZ25hdHVyZVZhbHVlPgpDdDhVUTRCbURvQmFKQjNDa3ZqTWNFclRuL0hRbVMyRVRCak1ZZmh0QUtUZjBaUzF6TFlmUUhmZy9jc28xeHJhWkY4ZDRSYzV3ZHNOCnE2WCtDUFY0TFJyUE9kZDdWM0cyeVF2ZENuOWdaNld5S2daM1JpUTd2dHFBYkNudjlBT2tXSDlaTnhYa1FwRStwTjVUY2N4K1Z4MVMKeVdNN2lveHc4cVQxMTZpNGJQd1N3RVkyd3E4dXlsNk5oUVZtMm16emppUzd5OGs0anhHZXNKSnc5VnVNY3FxZkVGTTBVSXV0aElpVgpWeGdBMzhsM09jb202WG8wQThDTVZHV1NEd1hTcmp3YmtlMHdxZWRtMFJ3RUVpcXBWTkNxQjhPYjdZUlg0bnROVi9EenhKM1NVbWlJCm8yRElyK0l6SUF0R2l2dWcrQkNNMnhNNnRtblRYMTZEdHNHSjl3PT0KPC9kczpTaWduYXR1cmVWYWx1ZT4KPGRzOktleUluZm8+CjxkczpYNTA5RGF0YT4KPGRzOlg1MDlDZXJ0aWZpY2F0ZT4KTUlJR1FUQ0NCU21nQXdJQkFnSVFBMS9EbmFOMTVISUttSFR1dCt4TzV6QU5CZ2txaGtpRzl3MEJBUXNGQURCZU1Rc3dDUVlEVlFRRwpFd0pWVXpFVk1CTUdBMVVFQ2hNTVJHbG5hVU5sY25RZ1NXNWpNUmt3RndZRFZRUUxFeEIzZDNjdVpHbG5hV05sY25RdVkyOXRNUjB3Ckd3WURWUVFERXhSU1lYQnBaRk5UVENCU1UwRWdRMEVnTWpBeE9EQWVGdzB4T1RBME1URXdNREF3TURCYUZ3MHlNVEEwTVRBeE1qQXcKTURCYU1DZ3hKakFrQmdOVkJBTVRIWFJsYzNRdWNHRnlkRzVsY2k1aVpXNWxabWwwWm05amRYTXVZMjl0TUlJQklqQU5CZ2txaGtpRwo5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBeHRqVkNXNjBZdjJhdGI1dHhtMnBPRkg5aWFkNUYxQWlhL0d3Yml2Q2RDWHZmYXA0CkZPNk1xbTlCVHRld3hBcmMwUGJrQjR4RkFwOGQ1K3ZWRDQ3NS9VNWhhRUhiM052TTc4b25uVElNU0R6YS82eUhIa1UwbHdYdXQ0OHYKeEdobHpyK0tSZFdHcHFmMC9FUEFwWjVaeWJqWkdyVW5lUWJxRXREUVduQlpLUDRNVXcwNUs2bFdSN2dZbVhKZWN4OExJVDBZTjZRMQplOGk0VUlscUZnUVRDUm9CWjdsbjhUaUVMUzRXQ2FsZUY4RDVaNmpUZEtKbkFrb0R2eExVQ3RZYkU4VmU3dDFPTHFMeGVjQjhuZnViCmpvUVlTcWhDWUFlTkgyTjVsWU00ZEU3N3NIUElBTTNidGhIUjVBaXBKWjVLNDlNZ1cyNzdpdDBwRE9zMXNkZC9zd0lEQVFBQm80SUQKTHpDQ0F5c3dId1lEVlIwakJCZ3dGb0FVVThvWFdmeHJ3QU1oTHhxdTVLcW9ISUpXMm5Vd0hRWURWUjBPQkJZRUZCV1Y2RUhOc2FIRwozSzZkQWlxQlEzNm9PR3NHTUNnR0ExVWRFUVFoTUIrQ0hYUmxjM1F1Y0dGeWRHNWxjaTVpWlc1bFptbDBabTlqZFhNdVkyOXRNQTRHCkExVWREd0VCL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd1BnWURWUjBmQkRjd05UQXoKb0RHZ0w0WXRhSFIwY0RvdkwyTmtjQzV5WVhCcFpITnpiQzVqYjIwdlVtRndhV1JUVTB4U1UwRkRRVEl3TVRndVkzSnNNRXdHQTFVZApJQVJGTUVNd053WUpZSVpJQVliOWJBRUNNQ293S0FZSUt3WUJCUVVIQWdFV0hHaDBkSEJ6T2k4dmQzZDNMbVJwWjJsalpYSjBMbU52CmJTOURVRk13Q0FZR1o0RU1BUUlCTUhVR0NDc0dBUVVGQndFQkJHa3daekFtQmdnckJnRUZCUWN3QVlZYWFIUjBjRG92TDNOMFlYUjEKY3k1eVlYQnBaSE56YkM1amIyMHdQUVlJS3dZQkJRVUhNQUtHTVdoMGRIQTZMeTlqWVdObGNuUnpMbkpoY0dsa2MzTnNMbU52YlM5UwpZWEJwWkZOVFRGSlRRVU5CTWpBeE9DNWpjblF3Q1FZRFZSMFRCQUl3QURDQ0FYNEdDaXNHQVFRQjFua0NCQUlFZ2dGdUJJSUJhZ0ZvCkFIWUF1OW5mdkIrS2NiV1RsQ09YcXBKN1J6aFhsUXFyVXVnYWtKWmtObzRlMFlVQUFBRnFEUEVVOWdBQUJBTUFSekJGQWlCMkJtUWkKRVR1OGdReklna2pxZHMyRE1taWlLbGw3WGRRNGpITCttS1lZUGdJaEFPNjgwWDZMZWMyQXBjWVc3SmRzNUp2bk9NNkJFdThnN0pYTgpHVzJ5dURJSEFIWUFoM1cvNTFsOCtJeERtVis5ODI3L1ZvMUhWamIvU3JWZ3diVHEvMTZnZ3c4QUFBRnFEUEVXRHdBQUJBTUFSekJGCkFpRUFuaHJGWmZCLzFrVmwwQ1hxeTgrOFJneTRYMm5aUVFqci9RcVR1UjE3SEtvQ0lCemZWWHVGTG8rUmZlZWY5bVpkempseFlPWjkKT01qQ05YTlFzaHgyYWI1dkFIWUFSSlJsTHJEdXpxL0VRQWZZcVA0b3dOcm1ncjdZeXpHMVA5TXpsclcyZ2FnQUFBRnFEUEVVaHdBQQpCQU1BUnpCRkFpRUEyaklmeXhpYXpONXVSNG4xNE42SVJxaE9NbW1hT0NhVndPMnhrMFhPQTFzQ0lCN1pGZjBWRzdzYjNuWFgyNTNMCm5ZNTk4V3F2dEZCejRsSHh2MXpYbmdlcU1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQ0JzR2hwSGFBclJUMHlRbE1LK09MQm55LysKd0crMXR1L3B1c25zSW4yQVMvblV6cWVyRVUzeGM3MXErOHEyYzdxamV3WTJFcTVLZmZ5bk5XRFg0cDR2VG9QL0d4N0dudW51V3pMVgowRlVRTHVCMzRzZ2JxSjIxMkppbWk5cWhqOWtDNHovZ2V4TEZsZWIxL2tSbFpSaTY0dmlxRE1qUTBtTFBrNE9BRVE0aHVTbDljTDJOCjdqVU1TNDNxZmo3Q1Bnb1EvSytVaVhlZmo2bzRLVXozMlppaG8zaE1sYjlPVG5wQk9NTkVwa3lZWm5lWVlRQzVwcVdmNi9FdFdncTkKTnNGcVVMOHhqNjdSZ1d6YW92dnA0N1dRa1M3amNRdnZ1NVZiUHAyVS9tNUFCOVRkZTh1MGNYREMyWm1ydnFCYmVlUndtbzk3OVpWVwpHa2tJWjJlaFhNRi8KPC9kczpYNTA5Q2VydGlmaWNhdGU+CjwvZHM6WDUwOURhdGE+CjwvZHM6S2V5SW5mbz4KPC9kczpTaWduYXR1cmU+PHNhbWxwOlN0YXR1cz48c2FtbHA6U3RhdHVzQ29kZSBWYWx1ZT0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnN0YXR1czpTdWNjZXNzIi8+PC9zYW1scDpTdGF0dXM+PHNhbWw6RW5jcnlwdGVkQXNzZXJ0aW9uIHhtbG5zOnNhbWw9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iPjx4ZW5jOkVuY3J5cHRlZERhdGEgVHlwZT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8wNC94bWxlbmMjRWxlbWVudCIgeG1sbnM6eGVuYz0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8wNC94bWxlbmMjIj48eGVuYzpFbmNyeXB0aW9uTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8wNC94bWxlbmMjYWVzMjU2LWNiYyIvPjxkczpLZXlJbmZvIHhtbG5zOmRzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIj4KPHhlbmM6RW5jcnlwdGVkS2V5Pjx4ZW5jOkVuY3J5cHRpb25NZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGVuYyNyc2Etb2FlcC1tZ2YxcCIvPjx4ZW5jOkNpcGhlckRhdGE+PHhlbmM6Q2lwaGVyVmFsdWU+cVdBUlRFTGt3Y1U2bE9KM3huU2pxeTFNcDdreWtabCtoUitVbmUzdGRPbEN1WTRJaVovcEFYOVZDd252ZzVjQXJXY2V2UmhLUmErcgplYkd4d25NVmZoMGlJYkFqckUxVnVIblAzRVBWOUFEbnNmSzRxRjlPcU1SYlV5bXNialJ4d1dqeXd5UUNqeHhaUlBKNFJuTTRzTHZ1Ck5HVE5ublVWWkFGa3lJVW1TYzZoTzN1Y01BTFlDWWVkUTJBWGR0YVVBOEhqVkdVcEY4WXphcU91OGw4L1hzSG52K1d2VTRCbnRLaGwKZ25HTzNsbGZkM0xNdERUdGxTMjlrUHFCQ0RLaWFLRFZyTFAxeHRYVGxTdVBWdGJFaFUyUUVzRUc5S2lWNmFCdThYU2owUFpHTU1xNgoxRmJja0w4QmtQK3Y4QWdNM1EvdmREMm1ic2VUbWxGUmN2UlVMQT09PC94ZW5jOkNpcGhlclZhbHVlPjwveGVuYzpDaXBoZXJEYXRhPjwveGVuYzpFbmNyeXB0ZWRLZXk+PC9kczpLZXlJbmZvPjx4ZW5jOkNpcGhlckRhdGE+PHhlbmM6Q2lwaGVyVmFsdWU+b3lrK01EQTZsaW5pdk5DSEdaM09JUEVaNlpDbWl6YkdXMXVjaEIycnp4VTMvMDhsaDIxZi8xQnVScTRLYzA2Y0lhMGZyTHVjRVpIMgpYeEdXeU0xKzdPdmZzcEhwUnE1c3N0SzY5V0xyd0ltRThGRXZNQlJ6cHdxeWVLMUFoenhOVllBTzRjbUVldndtT2h2M1JrVHRpNEVoClJXRllwZGxYNjcxZUo3eHJCMXZHdEFTajdjUmpRYjByYjB4R3hqUGxGVUpIWnVPWUpkVnFkaTNyejdOTmVGMGJVakhYZE5RbXdiUDAKTGJ1SDVKVGlOMGtSWFJNY0hVV3NzdStCMTUrYUFNQ1BkSHp3WUlFQmRqb0NhOUlvVy9KMUFqRFFSOGhWZ2xvbXJ0V3U2UjJYOHE5MgpMdjQwdThKRXFSNkd1YkFtL21mUnNvNHNEcTVCTnZqZmdCUlRaOWw2SFhEWTVlU1Y0ZUkvcTJBTWlRZW90eGtwTVNwYjMrckdzRm9NCnQ4ZVN2ZmhCTzFMbVpHbFFoRTk4Q0JvY3RCMlQyM3hhWW1PT0N3cTA1c3R2cUI5T01QdnlBY0EwMURXcU1vcXM3VzJ5d0xtQ0JPRHIKWHZwVUQ3Qk5QOVJLVXh5RFYwYkx5ekRXZU9BMlJFWUU2NUc3QllSdDV4NlFhR09lYkE2b1hWQ0xzZjJoc0VPQ0pISUsyT1hPTFo4QwpyZUhqMGdnSDBNTWVYRkFwYXdHdndiODlrUU80cFc3Y01mYUtlLzdIc2E3MWNxeDNKVldaMGZ6dzJhYkxxaW5xOXVqUFUvTUhRNC9QCmlXSUkyUUhYY21BaENkWFpLZUgvZXgwamQwT3dkT0labWdqVkxGSUlzQWR5U1daSFN0R1FqVW0rT1VDeGNKeWtuQ0k5YUNhb1ZHWlIKU0h3NVlEendjYnpxOUc0ZzdSbXVMbVRRSWN5bllNWmtVMm5NVFBRUWdYRCtBckt0NDZoOHR0RWxIdndMUnNJNll0VGZSWWNNNUFmSQo3cnlZUU9jREVFUjFYWGRwdmtJc1UwYTJBRkdabGJkcm9pa25ZdGZpL0JpNEZsclpzNXN6OVJkckhsNWhZNjlaU3RIbjdVM0ZlMGxuCjV2clk0aEF6aWNHVG43WWt5Qy9xbEhKVVJmUkQwSkJ1R2JQbVFOZWt5VmM4aHd5UktmZ1cyT0dnazFyZ3ZuQ0pyUWhTTVRNZC9HN3cKVmtBdXN1VFpmOVVKTVB1OXJRM2kyYVlaY0kvWlpPZnpCVm1PK0VJTnR1b1dwTURlK2NPZHFkajFTZmZLSGNqS2Y1MzlXYSt0d0U2bApzY1JwWFZKMGcybjJoSTdERVd6SzRhMmJodjhBalF0N3kyUTlDU1BnUzB2ZzRDbzNpdXYrblE4QVRwbHlWY1lyTm5GM2dwUjNTQ21ICmJhQlJxSnM3Y3FTWHQvZUFGRWl6clh6VnNEWFNPa2NwaTA2NytxNkJJa3QxN1hhVzJyUDMxSTZZVU5oZFZqWnd5aFVUakFLWWFEcjIKUzBVNWxjaFFFUVF0aDVLbjZhQVd5aGhoTmQ4WEdzam1MTGoxMCs5ak91dGZyT2FRQlQrV3ZJcEZ6ZEptaXBtUllRbmRaR29laklGSwpNU2V6VDdzaFJsSWI5RFE4RVZ5d204ZlFXWmNQUldFYXdTVy9IcFlWSkN6bEZNUCtlOVJxWmJDWmxTd0hpM0VjSWlGazJ5enU3QVNICm52cFFGRXJweXJkN0VGWkI2ZEJYSCtXVGZBcW5IZEsyYVdSNVY5eGRCb2pwYzRDTVZhYk9pUmdrR2FncCtmZElhek1IZ3hDYXZHSjEKSEw2eG8yb2JLSlREeDFrOU5vdmsyTGYvK0twZkVJeElXdGlXbjdGbnF3SHhYSkN3cDkyb3FsaU1UM3poQ3g0NnYzNlVGMWxNenV5UwpzOWE1Zy9GUko3ZG1SeGVzSUd2bmpYTmJ3V1ZMK3NxcWZuVS8wTmU5UVRnWTk4WmJLVE82d2VPRng0UncxOExBQ2tnbnBueFhINXZ4CnA1L2JNd0dNVTNQV2Qrd1FRbnpnVHV4U2QzWWJsa2JKWEw1ZlJHZDFTQmozcnhuK0xmcUxDWXVlQXJ0UWhQaVdEVTEwNEozOUhaMDUKMHBJVW9XUGtraktkbHFSNTFkNkVCemlmRDlpUFF2WEZoek9ReVNHakM2YktJTmtEMkYvUktxem9kdTk4ck5EenJGSkhxN3UyNms4VgppYWdHeGdSQ1duNnFDNkNyd2ZmQkJadnY4Uy8rQzhwNHNPSFVkT1ZOdEl1dGlyVzI2Q2MzcEd2M0tJT1J6bGZ6ZnRYamh2ZHJ1NTJMCjM4aU9Qd0hKNmZ2YXE0OFFYcUtQNlhrUjRyeFlET3dsR1h4ZXBTOE9tdldsaWRpZDFHd1o5SWtqZ0RxUC9FRmlBQVFDaGU3Rk90SEMKZXJmb0gzRFRFRmlEZXJRYTBxWHNLS25ldWI0NlNBRU9nZjRhM1EwUXhBaFFsaU1RZmFGM3ZBVmhCaUduZjk2Wm5uelFWNlNidjZLMwpHdFM3VnJLQ2plZis1aFVCdE40dVNEWmNVRU01WmJsMUdKUW82S0F1THlQSnBBYWZ0YmZtVTZqSTdvQWJJWUNFRWltZFBiUFhLbVNFCjhIOU5QZkk1T0VDZHFXUEpyN1BuR0cyNjdDRUVnRjhkdzlhWGFWbG5mc2d2Q0ZFb0w3cVM5UFJpY3Jmb1YxSW95dGR2WnRhNlJadUEKUzdkbXJvdHlmT3ltekZSMEtoNVhZeUNLUU5vUUNsNGIvVlp2VGxnUHNmT0U2Y04zYTdhY3VFLzhoM3N5aVNzUjZkc0xNNmQrRWZQUgpCcnJYRDZvVlV0bTlGY0ZQY1NSUlZGK2VtWjhKV2FLamxaVXNZTXRGWGgrTUQxNzJGRGh3OHJOK2xJUWtzMDJtL3l5U3JkU3FiWU1wCnlkKzZodHRNSlkvb3NUODk4aG5EUUhjUjh1cTI2bVR4N0prb21MWC84aHhrT2U1bDE5bUFpYUd3M1YrK2dKTmVobHRlSDVRdzhocVIKZGtYQXFBU1R0TDRwdkNzRnJ0ZXp0dVJqNk45NDhTS3VkamdFYTA2OEIvZnBlbVUxSGkvQVh0azZtTHpPSVZiLzZ5UTUvK3gxczl3dQovYmtuTW8wbTloSnIvaVpNdmJpRGJYb042Q3d5clBVMWdFZ3htek0zcTFOTDduQXhjTm5LMnhkZFowbkg2OFVCMnZ5cENGWHpqbDJ3CmxOTm52QVBUeWR1elBzbkdBMElyWE9pZG9JZVlnb2JpelB5cWhaZlRobXRBZHNpeHF4aC9sZS9kSmhOL0lTeGwreUliTzlIbU1CbEoKNWhwNlJObTZZZnpGNkhsdWN3NDBxMjIvVk1RTFgxUjJMOEJBM2tUVi9QbW5QMkZsdjNIZlhGcVBqVW9CK25JYW15OFdoUjhGVUpVbwo5ZkFpdDNBZHBKRy9IZWl0MFhjV3BsU3Jtb1hVMnd1eDY4NnlQNk93VjFtNkdlc3Z4SHMraEh0QVFJS3p1Tk1GMG5Tdlc1YmFrMCt5CjRhbHhiZ0FYa2xXTzJCUjg4SzRaSkNjb0g0c21mb2ltU2FXeUdmajl1bnd4UUg0OTg4R0w1UGlWUHRta3BwdWxyeUtJaWRmR0RVbU8KRUFzemtlN2ZDQm5QOHBiZjhTSWZiZUdxaDJZTkhrb3dDWEs0YnRrQlNYZFdMUnV1MlVRL0ZwT0dZakJ0d09Gakg1T1RyWjA3Unh4bAovRTFtZHNQNlMrK2lBZitVemd5a1RFb3pObW45bkVtRFpYMVQzaXJrZitlMnpJL213emtsZHE5YW9lclhOQkEweEUxY3FzbDZrT0lHClkra2w1RjVaTGFLSEpKUTBlbEZ3c0tHMnd3MXkraHVCb0NMNHNoelZHenVTRGZTUFFwR1Rldmd1WUdIdVp4bFFET201aDFLUGdjckwKeHAzNnJjU0xFbnI0alBMREdBRnJFallCZm5SN3p6M3ZXTC96TFg2RXpuQnkvYllNODRNdDNrcnh3bkFrQWZzRjNkZHJuT1ArUFQwMgpMYnVYRDBrbXh6VT08L3hlbmM6Q2lwaGVyVmFsdWU+PC94ZW5jOkNpcGhlckRhdGE+PC94ZW5jOkVuY3J5cHRlZERhdGE+PC9zYW1sOkVuY3J5cHRlZEFzc2VydGlvbj48L3NhbWxwOlJlc3BvbnNlPg=='
        aes256_saml = etree.fromstring(b64decode(aes256_saml))
        aes256_decrypted_assertion = SamlDecrypter(aes256_saml, decryption_keys).decrypt()
        self.assertIsNotNone(aes256_decrypted_assertion)

    def test_triple_des_decryption(self):
        """ Test to ensure we can decrypt a SAML Assertion that was encrypted via tripledes-cbc """
        test_private_key = '/Users/dfischer/Documents/bf_certs/private_keys/test_public_private/test.partner.benefitfocus.com.key.pem'
        decryption_keys = [test_private_key]
        des_saml = ''
        des_saml = etree.fromstring(b64decode(des_saml))
        des_decrypted_assertion = SamlDecrypter(des_saml, decryption_keys).decrypt()
        self.assertIsNotNone(des_decrypted_assertion)

    def test_encryption_with_retrieval_method(self):
        """ Test to ensure we can decrypt a SAML Assertion whose Key has a RetrievalMethod """
        test_private_key = '/Users/dfischer/Documents/bf_certs/private_keys/test_public_private/test.partner.benefitfocus.com.key.pem'
        decryption_keys = [test_private_key]
        retrieval_method_saml = ''
        retrieval_method_saml = etree.fromstring(b64decode(retrieval_method_saml))
        retrieval_method_decrypted_assertion = SamlDecrypter(retrieval_method_saml, decryption_keys).decrypt()
        self.assertIsNotNone(retrieval_method_decrypted_assertion)
